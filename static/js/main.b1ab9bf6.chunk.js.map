{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","e","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,iBACHC,IAAI,YAER,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCNjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNtBO,G,MAAY,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAY,qBACZG,SAAU,SAACC,GACPH,EAAaG,QCkCdC,E,kDAtCX,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTT,SAAU,GACVU,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEhB,SAAUe,S,oBAGnD,WAAU,IAAD,SAC6BE,KAAKR,MAA/BT,EADH,EACGA,SAAUU,EADb,EACaA,YAEZQ,EAAmBlB,EAASmB,QAAO,SAACzB,GAAD,OACrCA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAGpD,OACI,sBAAK5B,UAAU,MAAf,UACI,kDAEA,cAAC,EAAD,CACIW,YAAY,qBACZC,aAAc,SAACG,GACX,EAAKS,SAAS,CAAEN,YAAaH,EAAEe,OAAOC,WAG9C,cAAC,EAAD,CAAUvB,SAAUkB,W,GAjClBM,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b1ab9bf6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./card.style.css\";\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img\n                src={`https://robohash.org/${props.monster.id}?size=180x180`}\n                alt=\"monster\"\n            />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport \"./card-list.style.css\";\n\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {props.monsters.map((monster) => (\n                <Card key={monster.id} monster={monster}></Card>\n            ))}\n        </div>\n    );\n};\n","import React from \"react\";\n\nimport \"./search-box.style.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className=\"search\"\n            type=\"search\"\n            placeholder=\"Search monsters...\"\n            onChange={(e) => {\n                handleChange(e);\n            }}\n        />\n    );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: \"\",\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then((response) => response.json())\n            .then((users) => this.setState({ monsters: users }));\n    }\n\n    render() {\n        const { monsters, searchField } = this.state;\n\n        const filteredMonsters = monsters.filter((monster) =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n\n                <SearchBox\n                    placeholder=\"Search monsters...\"\n                    handleChange={(e) => {\n                        this.setState({ searchField: e.target.value });\n                    }}\n                ></SearchBox>\n                <CardList monsters={filteredMonsters}></CardList>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}